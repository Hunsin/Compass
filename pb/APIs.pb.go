// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/APIs.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/APIs.proto

It has these top-level messages:
	Filter
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import trade "trade"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Filter struct {
	Symbol string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	After  string `protobuf:"bytes,2,opt,name=after" json:"after,omitempty"`
	Before string `protobuf:"bytes,3,opt,name=before" json:"before,omitempty"`
	Type   string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Filter) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Filter) GetAfter() string {
	if m != nil {
		return m.After
	}
	return ""
}

func (m *Filter) GetBefore() string {
	if m != nil {
		return m.Before
	}
	return ""
}

func (m *Filter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*Filter)(nil), "pb.Filter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Predator service

type PredatorClient interface {
	Markets(ctx context.Context, in *trade.Null, opts ...grpc.CallOption) (Predator_MarketsClient, error)
	Securities(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Predator_SecuritiesClient, error)
	Records(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Predator_RecordsClient, error)
}

type predatorClient struct {
	cc *grpc.ClientConn
}

func NewPredatorClient(cc *grpc.ClientConn) PredatorClient {
	return &predatorClient{cc}
}

func (c *predatorClient) Markets(ctx context.Context, in *trade.Null, opts ...grpc.CallOption) (Predator_MarketsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Predator_serviceDesc.Streams[0], c.cc, "/pb.Predator/Markets", opts...)
	if err != nil {
		return nil, err
	}
	x := &predatorMarketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Predator_MarketsClient interface {
	Recv() (*trade.Market, error)
	grpc.ClientStream
}

type predatorMarketsClient struct {
	grpc.ClientStream
}

func (x *predatorMarketsClient) Recv() (*trade.Market, error) {
	m := new(trade.Market)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *predatorClient) Securities(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Predator_SecuritiesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Predator_serviceDesc.Streams[1], c.cc, "/pb.Predator/Securities", opts...)
	if err != nil {
		return nil, err
	}
	x := &predatorSecuritiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Predator_SecuritiesClient interface {
	Recv() (*trade.Security, error)
	grpc.ClientStream
}

type predatorSecuritiesClient struct {
	grpc.ClientStream
}

func (x *predatorSecuritiesClient) Recv() (*trade.Security, error) {
	m := new(trade.Security)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *predatorClient) Records(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Predator_RecordsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Predator_serviceDesc.Streams[2], c.cc, "/pb.Predator/Records", opts...)
	if err != nil {
		return nil, err
	}
	x := &predatorRecordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Predator_RecordsClient interface {
	Recv() (*trade.Daily, error)
	grpc.ClientStream
}

type predatorRecordsClient struct {
	grpc.ClientStream
}

func (x *predatorRecordsClient) Recv() (*trade.Daily, error) {
	m := new(trade.Daily)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Predator service

type PredatorServer interface {
	Markets(*trade.Null, Predator_MarketsServer) error
	Securities(*Filter, Predator_SecuritiesServer) error
	Records(*Filter, Predator_RecordsServer) error
}

func RegisterPredatorServer(s *grpc.Server, srv PredatorServer) {
	s.RegisterService(&_Predator_serviceDesc, srv)
}

func _Predator_Markets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(trade.Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PredatorServer).Markets(m, &predatorMarketsServer{stream})
}

type Predator_MarketsServer interface {
	Send(*trade.Market) error
	grpc.ServerStream
}

type predatorMarketsServer struct {
	grpc.ServerStream
}

func (x *predatorMarketsServer) Send(m *trade.Market) error {
	return x.ServerStream.SendMsg(m)
}

func _Predator_Securities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PredatorServer).Securities(m, &predatorSecuritiesServer{stream})
}

type Predator_SecuritiesServer interface {
	Send(*trade.Security) error
	grpc.ServerStream
}

type predatorSecuritiesServer struct {
	grpc.ServerStream
}

func (x *predatorSecuritiesServer) Send(m *trade.Security) error {
	return x.ServerStream.SendMsg(m)
}

func _Predator_Records_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PredatorServer).Records(m, &predatorRecordsServer{stream})
}

type Predator_RecordsServer interface {
	Send(*trade.Daily) error
	grpc.ServerStream
}

type predatorRecordsServer struct {
	grpc.ServerStream
}

func (x *predatorRecordsServer) Send(m *trade.Daily) error {
	return x.ServerStream.SendMsg(m)
}

var _Predator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Predator",
	HandlerType: (*PredatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Markets",
			Handler:       _Predator_Markets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Securities",
			Handler:       _Predator_Securities_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Records",
			Handler:       _Predator_Records_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/APIs.proto",
}

func init() { proto.RegisterFile("pb/APIs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x49, 0xad, 0x5b, 0x1d, 0x2d, 0xe2, 0x20, 0xb2, 0xec, 0x49, 0x04, 0x51, 0x10, 0xd2,
	0x45, 0x9f, 0x40, 0x10, 0xc1, 0x83, 0x52, 0xea, 0x13, 0x24, 0xdd, 0x29, 0x04, 0x23, 0x09, 0x93,
	0xe9, 0x21, 0x4f, 0xe0, 0x6b, 0x8b, 0x49, 0x2e, 0xbd, 0x84, 0x7c, 0xff, 0xff, 0x1d, 0xfe, 0x81,
	0x65, 0xb4, 0xab, 0x97, 0xf5, 0x7b, 0xd2, 0x91, 0x83, 0x04, 0x9c, 0x45, 0x3b, 0x5c, 0x0a, 0x9b,
	0x89, 0x56, 0xe5, 0xad, 0xf1, 0xad, 0x85, 0xee, 0xcd, 0x79, 0x21, 0xc6, 0x6b, 0xe8, 0x52, 0xfe,
	0xb1, 0xc1, 0xf7, 0xea, 0x46, 0x3d, 0x9c, 0x6e, 0x1a, 0xe1, 0x15, 0x1c, 0x9b, 0x9d, 0x10, 0xf7,
	0xb3, 0x12, 0x57, 0xf8, 0xb7, 0x2d, 0xed, 0x02, 0x53, 0x7f, 0x54, 0xed, 0x4a, 0x88, 0x30, 0x97,
	0x1c, 0xa9, 0x9f, 0x97, 0xb4, 0xfc, 0x9f, 0x7e, 0x15, 0x9c, 0xac, 0x99, 0x26, 0x23, 0x81, 0xf1,
	0x1e, 0x16, 0x1f, 0x86, 0xbf, 0x49, 0x12, 0x9e, 0xe9, 0xba, 0xe4, 0x73, 0xef, 0xfd, 0xb0, 0x6c,
	0x50, 0xcb, 0x51, 0xe1, 0x23, 0xc0, 0x17, 0x6d, 0xf7, 0xec, 0xc4, 0x51, 0x42, 0xd0, 0xd1, 0xea,
	0xba, 0x74, 0xb8, 0x68, 0x6a, 0xab, 0xf3, 0xa8, 0xf0, 0x0e, 0x16, 0x1b, 0xda, 0x06, 0x9e, 0x0e,
	0xcd, 0xf3, 0x66, 0xbe, 0x1a, 0xe7, 0xf3, 0xa8, 0x6c, 0x57, 0x8e, 0x7e, 0xfe, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0x49, 0x43, 0x5a, 0xa5, 0x1c, 0x01, 0x00, 0x00,
}
