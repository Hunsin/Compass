// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/Hunsin/compass/trade/pb/APIs.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import trade "github.com/Hunsin/compass/trade"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_UNKNOWN       Status = 0
	Status_UNIMPLEMENTED Status = 1
	// 1xx are query status
	Status_PING     Status = 100
	Status_SECURITY Status = 101
	Status_QUOTE    Status = 102
	Status_EXIT     Status = 103
	// 2xx are result status
	Status_DONE    Status = 200
	Status_PARTIAL Status = 206
	// 4xx are error status due to bad queries
	Status_BAD_REQUEST Status = 400
	Status_CLOSED      Status = 401
	Status_HALTED      Status = 402
	Status_UNLISTED    Status = 403
	Status_NOT_FOUND   Status = 404
)

var Status_name = map[int32]string{
	0:   "UNKNOWN",
	1:   "UNIMPLEMENTED",
	100: "PING",
	101: "SECURITY",
	102: "QUOTE",
	103: "EXIT",
	200: "DONE",
	206: "PARTIAL",
	400: "BAD_REQUEST",
	401: "CLOSED",
	402: "HALTED",
	403: "UNLISTED",
	404: "NOT_FOUND",
}
var Status_value = map[string]int32{
	"UNKNOWN":       0,
	"UNIMPLEMENTED": 1,
	"PING":          100,
	"SECURITY":      101,
	"QUOTE":         102,
	"EXIT":          103,
	"DONE":          200,
	"PARTIAL":       206,
	"BAD_REQUEST":   400,
	"CLOSED":        401,
	"HALTED":        402,
	"UNLISTED":      403,
	"NOT_FOUND":     404,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_APIs_f4900b9db1cf6626, []int{0}
}

type Result struct {
	QueryId              string            `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Status               Status            `protobuf:"varint,2,opt,name=status,proto3,enum=pb.Status" json:"status,omitempty"`
	Market               *trade.Market     `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Securities           []*trade.Security `protobuf:"bytes,4,rep,name=securities,proto3" json:"securities,omitempty"`
	Quotes               []*trade.Quote    `protobuf:"bytes,5,rep,name=quotes,proto3" json:"quotes,omitempty"`
	Error                string            `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_APIs_f4900b9db1cf6626, []int{0}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *Result) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

func (m *Result) GetMarket() *trade.Market {
	if m != nil {
		return m.Market
	}
	return nil
}

func (m *Result) GetSecurities() []*trade.Security {
	if m != nil {
		return m.Securities
	}
	return nil
}

func (m *Result) GetQuotes() []*trade.Quote {
	if m != nil {
		return m.Quotes
	}
	return nil
}

func (m *Result) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Query struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ask                  Status   `protobuf:"varint,2,opt,name=ask,proto3,enum=pb.Status" json:"ask,omitempty"`
	Symbol               []string `protobuf:"bytes,3,rep,name=symbol,proto3" json:"symbol,omitempty"`
	FromDate             []string `protobuf:"bytes,4,rep,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	EndDate              []string `protobuf:"bytes,5,rep,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Type                 []string `protobuf:"bytes,6,rep,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_APIs_f4900b9db1cf6626, []int{1}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (dst *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(dst, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Query) GetAsk() Status {
	if m != nil {
		return m.Ask
	}
	return Status_UNKNOWN
}

func (m *Query) GetSymbol() []string {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *Query) GetFromDate() []string {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *Query) GetEndDate() []string {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *Query) GetType() []string {
	if m != nil {
		return m.Type
	}
	return nil
}

type Predator struct {
	Id                   string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr                 string          `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Markets              []*trade.Market `protobuf:"bytes,3,rep,name=markets,proto3" json:"markets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Predator) Reset()         { *m = Predator{} }
func (m *Predator) String() string { return proto.CompactTextString(m) }
func (*Predator) ProtoMessage()    {}
func (*Predator) Descriptor() ([]byte, []int) {
	return fileDescriptor_APIs_f4900b9db1cf6626, []int{2}
}
func (m *Predator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Predator.Unmarshal(m, b)
}
func (m *Predator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Predator.Marshal(b, m, deterministic)
}
func (dst *Predator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Predator.Merge(dst, src)
}
func (m *Predator) XXX_Size() int {
	return xxx_messageInfo_Predator.Size(m)
}
func (m *Predator) XXX_DiscardUnknown() {
	xxx_messageInfo_Predator.DiscardUnknown(m)
}

var xxx_messageInfo_Predator proto.InternalMessageInfo

func (m *Predator) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Predator) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Predator) GetMarkets() []*trade.Market {
	if m != nil {
		return m.Markets
	}
	return nil
}

// A Null is nothing.
type Null struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Null) Reset()         { *m = Null{} }
func (m *Null) String() string { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()    {}
func (*Null) Descriptor() ([]byte, []int) {
	return fileDescriptor_APIs_f4900b9db1cf6626, []int{3}
}
func (m *Null) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Null.Unmarshal(m, b)
}
func (m *Null) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Null.Marshal(b, m, deterministic)
}
func (dst *Null) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Null.Merge(dst, src)
}
func (m *Null) XXX_Size() int {
	return xxx_messageInfo_Null.Size(m)
}
func (m *Null) XXX_DiscardUnknown() {
	xxx_messageInfo_Null.DiscardUnknown(m)
}

var xxx_messageInfo_Null proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Result)(nil), "pb.Result")
	proto.RegisterType((*Query)(nil), "pb.Query")
	proto.RegisterType((*Predator)(nil), "pb.Predator")
	proto.RegisterType((*Null)(nil), "pb.Null")
	proto.RegisterEnum("pb.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CompassClient is the client API for Compass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompassClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (Compass_RegisterClient, error)
	Predators(ctx context.Context, in *Null, opts ...grpc.CallOption) (Compass_PredatorsClient, error)
}

type compassClient struct {
	cc *grpc.ClientConn
}

func NewCompassClient(cc *grpc.ClientConn) CompassClient {
	return &compassClient{cc}
}

func (c *compassClient) Register(ctx context.Context, opts ...grpc.CallOption) (Compass_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Compass_serviceDesc.Streams[0], "/pb.Compass/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &compassRegisterClient{stream}
	return x, nil
}

type Compass_RegisterClient interface {
	Send(*Result) error
	Recv() (*Query, error)
	grpc.ClientStream
}

type compassRegisterClient struct {
	grpc.ClientStream
}

func (x *compassRegisterClient) Send(m *Result) error {
	return x.ClientStream.SendMsg(m)
}

func (x *compassRegisterClient) Recv() (*Query, error) {
	m := new(Query)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *compassClient) Predators(ctx context.Context, in *Null, opts ...grpc.CallOption) (Compass_PredatorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Compass_serviceDesc.Streams[1], "/pb.Compass/Predators", opts...)
	if err != nil {
		return nil, err
	}
	x := &compassPredatorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Compass_PredatorsClient interface {
	Recv() (*Predator, error)
	grpc.ClientStream
}

type compassPredatorsClient struct {
	grpc.ClientStream
}

func (x *compassPredatorsClient) Recv() (*Predator, error) {
	m := new(Predator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CompassServer is the server API for Compass service.
type CompassServer interface {
	Register(Compass_RegisterServer) error
	Predators(*Null, Compass_PredatorsServer) error
}

func RegisterCompassServer(s *grpc.Server, srv CompassServer) {
	s.RegisterService(&_Compass_serviceDesc, srv)
}

func _Compass_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CompassServer).Register(&compassRegisterServer{stream})
}

type Compass_RegisterServer interface {
	Send(*Query) error
	Recv() (*Result, error)
	grpc.ServerStream
}

type compassRegisterServer struct {
	grpc.ServerStream
}

func (x *compassRegisterServer) Send(m *Query) error {
	return x.ServerStream.SendMsg(m)
}

func (x *compassRegisterServer) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Compass_Predators_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompassServer).Predators(m, &compassPredatorsServer{stream})
}

type Compass_PredatorsServer interface {
	Send(*Predator) error
	grpc.ServerStream
}

type compassPredatorsServer struct {
	grpc.ServerStream
}

func (x *compassPredatorsServer) Send(m *Predator) error {
	return x.ServerStream.SendMsg(m)
}

var _Compass_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Compass",
	HandlerType: (*CompassServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Compass_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Predators",
			Handler:       _Compass_Predators_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/Hunsin/compass/trade/pb/APIs.proto",
}

func init() {
	proto.RegisterFile("github.com/Hunsin/compass/trade/pb/APIs.proto", fileDescriptor_APIs_f4900b9db1cf6626)
}

var fileDescriptor_APIs_f4900b9db1cf6626 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x5f, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xd9, 0x38, 0x71, 0xec, 0x49, 0x5a, 0x96, 0x11, 0x42, 0xa6, 0xf0, 0x10, 0x45, 0x54,
	0x44, 0x20, 0x92, 0x2a, 0x9c, 0x20, 0x34, 0x86, 0x5a, 0xa4, 0x4e, 0xb2, 0xb1, 0x55, 0x78, 0x8a,
	0x9c, 0x7a, 0x5b, 0xac, 0x26, 0x71, 0xba, 0xbb, 0x7e, 0xc8, 0x2d, 0xf8, 0xf7, 0xc2, 0x51, 0xb8,
	0x01, 0x4f, 0x5c, 0x80, 0xcb, 0xa0, 0x5d, 0xa7, 0x08, 0xa9, 0x48, 0xbc, 0xac, 0x66, 0xbe, 0xdf,
	0xac, 0x76, 0xe6, 0xdb, 0x81, 0x17, 0x97, 0x99, 0xfa, 0x50, 0x2c, 0xba, 0xe7, 0xf9, 0xaa, 0x77,
	0x52, 0xac, 0x65, 0xb6, 0xee, 0x9d, 0xe7, 0xab, 0x4d, 0x22, 0x65, 0x4f, 0x89, 0x24, 0xe5, 0xbd,
	0xcd, 0xa2, 0x37, 0x98, 0x04, 0xb2, 0xbb, 0x11, 0xb9, 0xca, 0xb1, 0xb2, 0x59, 0x1c, 0x3c, 0xff,
	0xdf, 0x15, 0x73, 0x96, 0x17, 0xda, 0xbf, 0x08, 0xd8, 0x8c, 0xcb, 0x62, 0xa9, 0xf0, 0x21, 0x38,
	0xd7, 0x05, 0x17, 0xdb, 0x79, 0x96, 0x7a, 0xa4, 0x45, 0x3a, 0x2e, 0xab, 0x9b, 0x3c, 0x48, 0xb1,
	0x0d, 0xb6, 0x54, 0x89, 0x2a, 0xa4, 0x57, 0x69, 0x91, 0xce, 0x7e, 0x1f, 0xba, 0x9b, 0x45, 0x77,
	0x66, 0x14, 0xb6, 0x23, 0x78, 0x08, 0xf6, 0x2a, 0x11, 0x57, 0x5c, 0x79, 0x56, 0x8b, 0x74, 0x1a,
	0xfd, 0xbd, 0x6e, 0xf9, 0xce, 0xa9, 0x11, 0xd9, 0x0e, 0x62, 0x0f, 0x40, 0xf2, 0xf3, 0x42, 0x64,
	0x2a, 0xe3, 0xd2, 0xab, 0xb6, 0xac, 0x4e, 0xa3, 0x7f, 0x77, 0x57, 0x3a, 0x2b, 0xc1, 0x96, 0xfd,
	0x55, 0x82, 0x4f, 0xc0, 0xbe, 0x2e, 0x72, 0xc5, 0xa5, 0x57, 0x33, 0xc5, 0xcd, 0x5d, 0xf1, 0x54,
	0x8b, 0x6c, 0xc7, 0xf0, 0x3e, 0xd4, 0xb8, 0x10, 0xb9, 0xf0, 0x6c, 0xd3, 0x79, 0x99, 0xb4, 0xbf,
	0x11, 0xa8, 0x4d, 0xf5, 0x0c, 0xb8, 0x0f, 0x95, 0x3f, 0x63, 0x55, 0xb2, 0x14, 0x1f, 0x83, 0x95,
	0xc8, 0xab, 0x7f, 0x8c, 0xa3, 0x65, 0x7c, 0x00, 0xb6, 0xdc, 0xae, 0x16, 0xf9, 0xd2, 0xb3, 0x5a,
	0x56, 0xc7, 0x65, 0xbb, 0x0c, 0x1f, 0x81, 0x7b, 0x21, 0xf2, 0xd5, 0x3c, 0x4d, 0x14, 0x37, 0xbd,
	0xbb, 0xcc, 0xd1, 0xc2, 0x30, 0x51, 0x5c, 0xfb, 0xc7, 0xd7, 0x69, 0xc9, 0x6a, 0x86, 0xd5, 0xf9,
	0x3a, 0x35, 0x08, 0xa1, 0xaa, 0xb6, 0x1b, 0xee, 0xd9, 0x46, 0x36, 0x71, 0xfb, 0x0c, 0x9c, 0x89,
	0xe0, 0x69, 0xa2, 0x72, 0x71, 0xab, 0x3b, 0x84, 0x6a, 0x92, 0xa6, 0xc2, 0xb4, 0xe7, 0x32, 0x13,
	0xe3, 0x53, 0xa8, 0x97, 0x16, 0x4a, 0xd3, 0xd4, 0x2d, 0x83, 0x6f, 0x68, 0xdb, 0x86, 0x6a, 0x58,
	0x2c, 0x97, 0xcf, 0xbe, 0x13, 0xb0, 0xcb, 0xa1, 0xb0, 0x01, 0xf5, 0x38, 0x7c, 0x1b, 0x8e, 0xcf,
	0x42, 0x7a, 0x07, 0xef, 0xc1, 0x5e, 0x1c, 0x06, 0xa7, 0x93, 0x91, 0x7f, 0xea, 0x87, 0x91, 0x3f,
	0xa4, 0x04, 0x1d, 0xa8, 0x4e, 0x82, 0xf0, 0x0d, 0x4d, 0xb1, 0x09, 0xce, 0xcc, 0x3f, 0x8e, 0x59,
	0x10, 0xbd, 0xa7, 0x1c, 0x5d, 0xa8, 0x4d, 0xe3, 0x71, 0xe4, 0xd3, 0x0b, 0x5d, 0xe2, 0xbf, 0x0b,
	0x22, 0x7a, 0x89, 0x2e, 0x54, 0x87, 0xe3, 0xd0, 0xa7, 0x3f, 0x08, 0x36, 0xa1, 0x3e, 0x19, 0xb0,
	0x28, 0x18, 0x8c, 0xe8, 0x4f, 0x82, 0x14, 0x1a, 0xaf, 0x06, 0xc3, 0x39, 0xf3, 0xa7, 0xb1, 0x3f,
	0x8b, 0xe8, 0x47, 0x0b, 0x1b, 0x60, 0x1f, 0x8f, 0xc6, 0x33, 0x7f, 0x48, 0x3f, 0x99, 0xe4, 0x64,
	0x30, 0xd2, 0x0f, 0x7e, 0xb6, 0x70, 0x0f, 0x9c, 0x38, 0x1c, 0x05, 0x33, 0x9d, 0x7e, 0xb1, 0x70,
	0x1f, 0xdc, 0x70, 0x1c, 0xcd, 0x5f, 0x8f, 0xe3, 0x70, 0x48, 0xbf, 0x5a, 0xfd, 0x33, 0xa8, 0x1f,
	0x97, 0x3b, 0x8b, 0x87, 0xe0, 0x30, 0x7e, 0x99, 0x49, 0xc5, 0x05, 0x9a, 0x8f, 0x2a, 0xd7, 0xf5,
	0xc0, 0xd5, 0xb1, 0xf9, 0xdc, 0x0e, 0x39, 0x22, 0x78, 0x08, 0xee, 0x8d, 0x9d, 0x12, 0x1d, 0xcd,
	0xb4, 0x09, 0x07, 0x4d, 0x1d, 0xdd, 0x80, 0x23, 0xb2, 0xb0, 0xcd, 0xda, 0xbf, 0xfc, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xec, 0x54, 0x40, 0x50, 0x58, 0x03, 0x00, 0x00,
}
