// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/Hunsin/compass/trade/pb/APIs.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import trade "github.com/Hunsin/compass/trade"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Filter struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	After                string   `protobuf:"bytes,2,opt,name=after" json:"after,omitempty"`
	Before               string   `protobuf:"bytes,3,opt,name=before" json:"before,omitempty"`
	Type                 string   `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_APIs_f7737937756ea34d, []int{0}
}
func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (dst *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(dst, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Filter) GetAfter() string {
	if m != nil {
		return m.After
	}
	return ""
}

func (m *Filter) GetBefore() string {
	if m != nil {
		return m.Before
	}
	return ""
}

func (m *Filter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Crawler struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Crawler) Reset()         { *m = Crawler{} }
func (m *Crawler) String() string { return proto.CompactTextString(m) }
func (*Crawler) ProtoMessage()    {}
func (*Crawler) Descriptor() ([]byte, []int) {
	return fileDescriptor_APIs_f7737937756ea34d, []int{1}
}
func (m *Crawler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Crawler.Unmarshal(m, b)
}
func (m *Crawler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Crawler.Marshal(b, m, deterministic)
}
func (dst *Crawler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crawler.Merge(dst, src)
}
func (m *Crawler) XXX_Size() int {
	return xxx_messageInfo_Crawler.Size(m)
}
func (m *Crawler) XXX_DiscardUnknown() {
	xxx_messageInfo_Crawler.DiscardUnknown(m)
}

var xxx_messageInfo_Crawler proto.InternalMessageInfo

func (m *Crawler) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Crawler) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// A Null is nothing.
type Null struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Null) Reset()         { *m = Null{} }
func (m *Null) String() string { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()    {}
func (*Null) Descriptor() ([]byte, []int) {
	return fileDescriptor_APIs_f7737937756ea34d, []int{2}
}
func (m *Null) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Null.Unmarshal(m, b)
}
func (m *Null) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Null.Marshal(b, m, deterministic)
}
func (dst *Null) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Null.Merge(dst, src)
}
func (m *Null) XXX_Size() int {
	return xxx_messageInfo_Null.Size(m)
}
func (m *Null) XXX_DiscardUnknown() {
	xxx_messageInfo_Null.DiscardUnknown(m)
}

var xxx_messageInfo_Null proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Filter)(nil), "pb.Filter")
	proto.RegisterType((*Crawler)(nil), "pb.Crawler")
	proto.RegisterType((*Null)(nil), "pb.Null")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CompassClient is the client API for Compass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompassClient interface {
	Register(ctx context.Context, in *Crawler, opts ...grpc.CallOption) (*Null, error)
	Crawlers(ctx context.Context, in *Null, opts ...grpc.CallOption) (Compass_CrawlersClient, error)
}

type compassClient struct {
	cc *grpc.ClientConn
}

func NewCompassClient(cc *grpc.ClientConn) CompassClient {
	return &compassClient{cc}
}

func (c *compassClient) Register(ctx context.Context, in *Crawler, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/pb.Compass/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassClient) Crawlers(ctx context.Context, in *Null, opts ...grpc.CallOption) (Compass_CrawlersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Compass_serviceDesc.Streams[0], "/pb.Compass/Crawlers", opts...)
	if err != nil {
		return nil, err
	}
	x := &compassCrawlersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Compass_CrawlersClient interface {
	Recv() (*Crawler, error)
	grpc.ClientStream
}

type compassCrawlersClient struct {
	grpc.ClientStream
}

func (x *compassCrawlersClient) Recv() (*Crawler, error) {
	m := new(Crawler)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Compass service

type CompassServer interface {
	Register(context.Context, *Crawler) (*Null, error)
	Crawlers(*Null, Compass_CrawlersServer) error
}

func RegisterCompassServer(s *grpc.Server, srv CompassServer) {
	s.RegisterService(&_Compass_serviceDesc, srv)
}

func _Compass_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crawler)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Compass/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServer).Register(ctx, req.(*Crawler))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compass_Crawlers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompassServer).Crawlers(m, &compassCrawlersServer{stream})
}

type Compass_CrawlersServer interface {
	Send(*Crawler) error
	grpc.ServerStream
}

type compassCrawlersServer struct {
	grpc.ServerStream
}

func (x *compassCrawlersServer) Send(m *Crawler) error {
	return x.ServerStream.SendMsg(m)
}

var _Compass_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Compass",
	HandlerType: (*CompassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Compass_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Crawlers",
			Handler:       _Compass_Crawlers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/Hunsin/compass/trade/pb/APIs.proto",
}

// PredatorClient is the client API for Predator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PredatorClient interface {
	Markets(ctx context.Context, in *Null, opts ...grpc.CallOption) (Predator_MarketsClient, error)
	Securities(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Predator_SecuritiesClient, error)
	Records(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Predator_RecordsClient, error)
}

type predatorClient struct {
	cc *grpc.ClientConn
}

func NewPredatorClient(cc *grpc.ClientConn) PredatorClient {
	return &predatorClient{cc}
}

func (c *predatorClient) Markets(ctx context.Context, in *Null, opts ...grpc.CallOption) (Predator_MarketsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Predator_serviceDesc.Streams[0], "/pb.Predator/Markets", opts...)
	if err != nil {
		return nil, err
	}
	x := &predatorMarketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Predator_MarketsClient interface {
	Recv() (*trade.Market, error)
	grpc.ClientStream
}

type predatorMarketsClient struct {
	grpc.ClientStream
}

func (x *predatorMarketsClient) Recv() (*trade.Market, error) {
	m := new(trade.Market)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *predatorClient) Securities(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Predator_SecuritiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Predator_serviceDesc.Streams[1], "/pb.Predator/Securities", opts...)
	if err != nil {
		return nil, err
	}
	x := &predatorSecuritiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Predator_SecuritiesClient interface {
	Recv() (*trade.Security, error)
	grpc.ClientStream
}

type predatorSecuritiesClient struct {
	grpc.ClientStream
}

func (x *predatorSecuritiesClient) Recv() (*trade.Security, error) {
	m := new(trade.Security)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *predatorClient) Records(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Predator_RecordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Predator_serviceDesc.Streams[2], "/pb.Predator/Records", opts...)
	if err != nil {
		return nil, err
	}
	x := &predatorRecordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Predator_RecordsClient interface {
	Recv() (*trade.Daily, error)
	grpc.ClientStream
}

type predatorRecordsClient struct {
	grpc.ClientStream
}

func (x *predatorRecordsClient) Recv() (*trade.Daily, error) {
	m := new(trade.Daily)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Predator service

type PredatorServer interface {
	Markets(*Null, Predator_MarketsServer) error
	Securities(*Filter, Predator_SecuritiesServer) error
	Records(*Filter, Predator_RecordsServer) error
}

func RegisterPredatorServer(s *grpc.Server, srv PredatorServer) {
	s.RegisterService(&_Predator_serviceDesc, srv)
}

func _Predator_Markets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Null)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PredatorServer).Markets(m, &predatorMarketsServer{stream})
}

type Predator_MarketsServer interface {
	Send(*trade.Market) error
	grpc.ServerStream
}

type predatorMarketsServer struct {
	grpc.ServerStream
}

func (x *predatorMarketsServer) Send(m *trade.Market) error {
	return x.ServerStream.SendMsg(m)
}

func _Predator_Securities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PredatorServer).Securities(m, &predatorSecuritiesServer{stream})
}

type Predator_SecuritiesServer interface {
	Send(*trade.Security) error
	grpc.ServerStream
}

type predatorSecuritiesServer struct {
	grpc.ServerStream
}

func (x *predatorSecuritiesServer) Send(m *trade.Security) error {
	return x.ServerStream.SendMsg(m)
}

func _Predator_Records_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PredatorServer).Records(m, &predatorRecordsServer{stream})
}

type Predator_RecordsServer interface {
	Send(*trade.Daily) error
	grpc.ServerStream
}

type predatorRecordsServer struct {
	grpc.ServerStream
}

func (x *predatorRecordsServer) Send(m *trade.Daily) error {
	return x.ServerStream.SendMsg(m)
}

var _Predator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Predator",
	HandlerType: (*PredatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Markets",
			Handler:       _Predator_Markets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Securities",
			Handler:       _Predator_Securities_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Records",
			Handler:       _Predator_Records_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/Hunsin/compass/trade/pb/APIs.proto",
}

func init() {
	proto.RegisterFile("github.com/Hunsin/compass/trade/pb/APIs.proto", fileDescriptor_APIs_f7737937756ea34d)
}

var fileDescriptor_APIs_f7737937756ea34d = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xdf, 0x4a, 0xf3, 0x40,
	0x10, 0xc5, 0x49, 0xda, 0x2f, 0xc9, 0x37, 0xfe, 0x65, 0x10, 0x09, 0xb9, 0xd2, 0xaa, 0x20, 0x14,
	0x93, 0x50, 0x9f, 0x40, 0x2a, 0xa2, 0x17, 0x4a, 0xad, 0x4f, 0xb0, 0x9b, 0x6c, 0xeb, 0xe2, 0xb6,
	0x1b, 0x66, 0x37, 0x48, 0xee, 0x7d, 0x70, 0x49, 0x76, 0x91, 0x7a, 0xe5, 0xcd, 0x32, 0xe7, 0xcc,
	0x6f, 0x66, 0x96, 0x03, 0x37, 0x6b, 0x69, 0xdf, 0x5b, 0x9e, 0x57, 0x7a, 0x53, 0x3c, 0xb6, 0x5b,
	0x23, 0xb7, 0x45, 0xa5, 0x37, 0x0d, 0x33, 0xa6, 0xb0, 0xc4, 0x6a, 0x51, 0x34, 0xbc, 0xb8, 0x5b,
	0x3c, 0x99, 0xbc, 0x21, 0x6d, 0x35, 0x86, 0x0d, 0xcf, 0xa6, 0x7f, 0x8d, 0x0c, 0xaf, 0x1b, 0x98,
	0x70, 0x88, 0x1e, 0xa4, 0xb2, 0x82, 0xf0, 0x14, 0x22, 0xd3, 0x6d, 0xb8, 0x56, 0x69, 0x70, 0x16,
	0x5c, 0xff, 0x5f, 0x7a, 0x85, 0x27, 0xf0, 0x8f, 0xad, 0xac, 0xa0, 0x34, 0x1c, 0x6c, 0x27, 0x7a,
	0x9a, 0x8b, 0x95, 0x26, 0x91, 0x8e, 0x1c, 0xed, 0x14, 0x22, 0x8c, 0x6d, 0xd7, 0x88, 0x74, 0x3c,
	0xb8, 0x43, 0x3d, 0x99, 0x42, 0x3c, 0x27, 0xf6, 0xa9, 0x04, 0xe1, 0x21, 0x84, 0xb2, 0xf6, 0x07,
	0x42, 0x59, 0xe3, 0x31, 0x8c, 0x5a, 0x52, 0x7e, 0x75, 0x5f, 0x4e, 0x22, 0x18, 0xbf, 0xb4, 0x4a,
	0xcd, 0x5e, 0x21, 0x9e, 0xbb, 0x5f, 0xe3, 0x39, 0x24, 0x4b, 0xb1, 0x96, 0xa6, 0xbf, 0xbb, 0x97,
	0x37, 0x3c, 0xf7, 0xdb, 0xb2, 0xa4, 0x17, 0x3d, 0x8d, 0x17, 0x90, 0x78, 0xd3, 0xe0, 0x8f, 0x9b,
	0xed, 0xc2, 0x65, 0x30, 0xfb, 0x0a, 0x20, 0x59, 0x90, 0xa8, 0x99, 0xd5, 0x84, 0x97, 0x10, 0x3f,
	0x33, 0xfa, 0x10, 0x76, 0x77, 0xe0, 0x20, 0x77, 0xd9, 0xb8, 0x4e, 0x19, 0xe0, 0x14, 0xe0, 0x4d,
	0x54, 0x2d, 0x49, 0x2b, 0x85, 0x41, 0xe8, 0x41, 0x17, 0x57, 0x76, 0xe4, 0x51, 0xdf, 0xee, 0xca,
	0x00, 0xaf, 0x20, 0x5e, 0x8a, 0x4a, 0x53, 0xfd, 0x9b, 0xdc, 0xf7, 0xe4, 0x3d, 0x93, 0xaa, 0x2b,
	0x03, 0x1e, 0x0d, 0xc9, 0xdf, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xca, 0x73, 0x95, 0xf9, 0xdb,
	0x01, 0x00, 0x00,
}
